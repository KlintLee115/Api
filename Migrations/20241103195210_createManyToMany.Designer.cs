// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241103195210_createManyToMany")]
    partial class createManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Model.AthleteInfo", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<char?>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerAthleteInfo", (string)null);
                });

            modelBuilder.Entity("Api.Model.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDateTime")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDateTime")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Api.Model.Courses.CourseSchedule", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("BeginTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("CourseId", "Location", "BeginTime");

                    b.ToTable("CourseSchedules", (string)null);
                });

            modelBuilder.Entity("Api.Model.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Api.Model.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("Api.Model.FinancialInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FinancialInfo");
                });

            modelBuilder.Entity("Api.Model.People.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CustomerFinancialInfo", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinancialInfosId")
                        .HasColumnType("uuid");

                    b.HasKey("CustomersId", "FinancialInfosId");

                    b.HasIndex("FinancialInfosId");

                    b.ToTable("CustomerFinancialInfo", (string)null);
                });

            modelBuilder.Entity("Api.Model.Coach", b =>
                {
                    b.HasBaseType("Api.Model.People.Account");

                    b.ToTable("Coaches", (string)null);
                });

            modelBuilder.Entity("Api.Model.People.Admin", b =>
                {
                    b.HasBaseType("Api.Model.People.Account");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Api.Model.People.Customer", b =>
                {
                    b.HasBaseType("Api.Model.People.Account");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasConsentMarketingEmails")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasConsentMarketingSms")
                        .HasColumnType("boolean");

                    b.Property<int?>("Role")
                        .HasColumnType("integer");

                    b.Property<bool>("ShouldReceiveReceiptsForAllPayments")
                        .HasColumnType("boolean");

                    b.HasIndex("CourseId");

                    b.HasIndex("FamilyId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Api.Model.AthleteInfo", b =>
                {
                    b.HasOne("Api.Model.People.Customer", "Customer")
                        .WithOne("AthleteInfo")
                        .HasForeignKey("Api.Model.AthleteInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Api.Model.Courses.Course", b =>
                {
                    b.HasOne("Api.Model.Coach", "Coach")
                        .WithMany("Courses")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Api.Model.Courses.CourseSchedule", b =>
                {
                    b.HasOne("Api.Model.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CustomerFinancialInfo", b =>
                {
                    b.HasOne("Api.Model.People.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Model.FinancialInfo", null)
                        .WithMany()
                        .HasForeignKey("FinancialInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Model.Coach", b =>
                {
                    b.HasOne("Api.Model.People.Account", null)
                        .WithOne()
                        .HasForeignKey("Api.Model.Coach", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Model.People.Admin", b =>
                {
                    b.HasOne("Api.Model.People.Account", null)
                        .WithOne()
                        .HasForeignKey("Api.Model.People.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Model.People.Customer", b =>
                {
                    b.HasOne("Api.Model.Courses.Course", null)
                        .WithMany("Customers")
                        .HasForeignKey("CourseId");

                    b.HasOne("Api.Model.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId");

                    b.HasOne("Api.Model.People.Account", null)
                        .WithOne()
                        .HasForeignKey("Api.Model.People.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Api.Model.Courses.Course", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Api.Model.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Api.Model.Coach", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Api.Model.People.Customer", b =>
                {
                    b.Navigation("AthleteInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
